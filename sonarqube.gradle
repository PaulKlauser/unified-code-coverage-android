sonarqube {
    //noinspection GroovyAssignabilityCheck
    properties {
        // Update your android version
        def libraries = project.android.sdkDirectory.getPath() + "/platforms/android-23/android.jar"
        if (project.plugins.hasPlugin('com.android.application')) {
            "build/intermediates/exploded-aar/**/classes.jar"
        }

        property "sonar.sources", "src/main/java, src/main/kotlin"
        property "sonar.test.exclusions", "src/test/**, src/androidTest/**"

         // Defines where the java files are
        property "sonar.binaries", "$projectDir/build/intermediates/classes,$projectDir/build/tmp/kotlin-classes"
        property "sonar.libraries", libraries
        // Defines where the xml files are
        property "sonar.java.binaries", "$projectDir/build/intermediates/classes,$projectDir/build/tmp/kotlin-classes"
        property "sonar.java.libraries", libraries

        // Analyze tests classes
        if (project.plugins.hasPlugin('com.android.application')) {
            property "sonar.tests", "src/test/java, src/androidTest/java"
        } else {
            property "sonar.tests", "src/test/java"
        }

        property "sonar.java.test.binaries", "build/intermediates/classes/debug"
        property "sonar.java.test.libraries", libraries

        property "detekt.sonar.kotlin.config.path", "$project.rootDir/detekt.yml"
        property "detekt.sonar.kotlin.filters", ".*/test/.*,.*/resources/.*,.*/build/.*,.*/target/.*"

        def unit = fileTree(dir: project.projectDir, includes: ['**/*.exec']).files;
        def ui = fileTree(dir: project.projectDir, includes: ['**/*.ec']).files;
        unit.addAll(ui);
        def files = unit.join(", ");

        property "sonar.jacoco.reportPaths", files
        property "sonar.java.coveragePlugin", "jacoco"
        property "sonar.junit.reportPaths", "${project.buildDir}build/test-results/testDebugUnitTest"
        property "sonar.android.lint.report", "${project.buildDir}build/outputs/lint-results.xml"
    }
}